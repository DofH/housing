{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useState","files","setFiles","doc","setDoc","origView","useRef","SVG","setSVG","keys","spaces","elems","svg","tooltip","setTooltip","tipTimeout","camelCase","str","sep","split","map","part","i","toUpperCase","slice","join","setViewBox","box","x","y","width","height","current","setAttribute","cleanAttributes","attributes","attrs","attr","nodeName","nodeValue","style","prop","val","class","className","svgPoint","point","createSVGPoint","zoomedBox","elem","opts","padPercent","serialize","getBBox","nodeType","tfm2elm","getScreenCTM","inverse","multiply","pad","Math","min","upLeft","lowRight","tUpLeft","matrixTransform","tLowRight","dest","upRight","tUpRight","slope","console","info","atan","zoomTo","newView","viewBox","TweenMax","to","ease","Power3","easeInOut","setKeyTo","replace","key","anchors","childNodes","filter","c","includes","anchor","classList","id","visible","add","remove","display","opacity","clickShow","clicked","parentNode","loadDoc","filename","a","fetch","res","status","text","alert","useEffect","dom","DOMParser","parseFromString","documentElement","buildTree","root","Node","ELEMENT_NODE","children","child","length","find","sub","TEXT_NODE","push","data","React","createElement","trim","error","rootTransform","ref","createRef","onClick","card","querySelector","unshift","evt","target","xlinkHref","startsWith","fs","prevClick","txElem","transform","easeOut","handler","toggle","space","window","addEventListener","node","setTimeout","clearTimeout","err","view","parts","parseFloat","getViewBox","mult","altKey","deltaY","abs","shiftKey","ctrlKey","preventDefault","clientX","clientY","viewPoint","d","dPrime","passive","removeEventListener","f","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.17744a1e.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef, useRef } from 'react'\nimport { TweenMax, Power3 } from 'gsap/all'\nimport './App.css'\n\nexport default () => {\n  const [files, setFiles] = useState(['survey.svg'])\n  const [doc, setDoc] = useState()\n  const origView = useRef(null)\n  const [SVG, setSVG] = useState()\n  const keys = useRef([])\n  const spaces = useRef([])\n  const elems = useRef({})\n  const svg = useRef()\n  const [tooltip, setTooltip] = useState()\n  const tipTimeout = useRef()\n\n  const camelCase = (str, sep = '-') => (\n    str.split(sep)\n    .map((part, i) => {\n      if(i === 0) {\n        return part\n      } else {\n        return part[0].toUpperCase() + part.slice(1)\n      }\n    })\n    .join('')\n  )\n\n  const getViewBox = () => {\n    const str = svg.current.attributes.viewBox.nodeValue\n    const parts = str.split(/\\s+/).map(parseFloat)\n    return {\n      x: parts[0], y: parts[1], width: parts[2], height: parts[3]\n    }\n  }\n\n  const setViewBox = (box) => {\n    if(typeof box !== 'string') {\n      box = [box.x, box.y, box.width, box.height].join(' ')\n    }\n    svg.current.setAttribute('viewBox', box)\n  }\n\n  // dispatched events go to all parents, propagated events go to all children\n  const propogateEvent = (type, ref) => {\n    const evt = new CustomEvent(type, {\n      bubbles: false,\n      detail: { text: () => type }\n    })\n    ref.current.dispatchEvent(evt)\n    eventChildren(evt, ref.current)\n  }\n\n  const eventChildren = (evt, target) => {\n    for(let child of [...target.childNodes]) {\n      if(child.dispatchEvent) {\n        child.dispatchEvent(evt)\n        eventChildren(evt, child)\n      }\n    }\n  }\n  \n  const cleanAttributes = (attributes) => {\n    const attrs = {}\n    for(let attr of attributes) {\n      attrs[attr.nodeName] = attr.nodeValue\n    }\n\n    if(attrs.style) {\n      const style = {}\n      for(let elem of attrs.style.split(';')) {\n        let [prop, val] = elem.split(':')\n        prop = camelCase(prop, '-')\n        style[prop] = val\n      }\n      attrs.style = style\n    }\n\n    if(attrs.class) {\n      attrs.className = attrs.class\n      delete attrs.class\n    }\n    for(let attr of ['xml:space', 'xlink:href', 'xmlns:xlink']) {\n      if(attrs[attr]) {\n        attrs[camelCase(attr, ':')] = attrs[attr]\n        delete attrs[attr]\n      }\n    }\n    for(let attr of ['flood-opacity', 'flood-color']) {\n      if(attrs[attr]) {\n        attrs[camelCase(attr, '-')] = attrs[attr]\n        delete attrs[attr]\n      }\n    }\n\n    return attrs\n  }\n\n  const svgPoint = (x, y) => {\n    let point = svg.current.createSVGPoint()\n    point.x = x\n    point.y = y\n    return point\n  } \n\n  const zoomedBox = (elem, opts = {}) => {\n    const { padPercent = 2, serialize = true } = opts\n    let box = elem.getBBox()\n    if(elem.nodeType === 'rect') {\n      box = {\n        x: elem.attributes.x, y: elem.attributes.y,\n        width: elem.attributes.width, height: elem.attributes.height,\n      }\n    }\n    const tfm2elm = (\n      svg.current.getScreenCTM().inverse().multiply(elem.getScreenCTM())\n    )\n    const pad = (padPercent / 100) * Math.min(box.width, box.height)\n    const upLeft = svgPoint(box.x - pad, box.y - pad)\n    const lowRight = svgPoint(\n      box.x + box.width + 2 * pad, box.y + box.height + 2 * pad\n    )\n    const tUpLeft = upLeft.matrixTransform(tfm2elm)\n    const tLowRight = lowRight.matrixTransform(tfm2elm)\n    const dest = {\n      x: tUpLeft.x, y: tUpLeft.y,\n      width: tLowRight.x - tUpLeft.x,\n      height: tLowRight.y - tUpLeft.y,\n    }\n    \n    const upRight = svgPoint(lowRight.x, upLeft.y)\n    const tUpRight = upRight.matrixTransform(tfm2elm)\n    const slope = (tUpLeft.y - tUpRight.y) / (tUpLeft.x - tUpRight.x)\n    console.info(tUpLeft, tUpRight, tLowRight, Math.atan(slope))\n\n    if(serialize) {\n      return [dest.x, dest.y, dest.width, dest.height].join(' ')\n    } else {\n      return dest\n    }\n  }\n\n  const zoomTo = (elem) => {\n    let newView = zoomedBox(elem)\n    if(newView === svg.current.attributes.viewBox.nodeValue) {\n      newView = origView.current\n    }\n    TweenMax.to(\n      svg.current, 1, { attr: { viewBox: newView }, ease: Power3.easeInOut }\n    )\n  }\n\n  const setKeyTo = (to) => {\n    to = to.replace(/^#/, '')\n    for(let key of keys.current) {\n      const anchors = (\n        [...key.current.childNodes]\n        .filter(c => c.attributes && c.attributes['xlink:href'])\n      )\n      const links = (\n        anchors\n        .map(c => c.attributes['xlink:href'].nodeValue.replace(/^#/, ''))\n      )\n\n      if(links.includes(to)) {\n        for(let anchor of anchors) {\n          if(!anchor.classList) continue\n\n          const id = anchor.attributes['xlink:href'].nodeValue.replace(/^#/, '')\n          const elem = elems.current[id] && elems.current[id].current\n          const visible = id === to\n\n          if(visible) {\n            anchor.classList.add('active')\n          } else {\n            anchor.classList.remove('active')\n          }\n\n          TweenMax.to(\n            elem, 0.5, {\n              display: visible ? 'inline' : 'none',\n              opacity: visible ? 1 : 0,\n              ease: Power3.easeInOut,\n            }\n          )\n        }\n      }\n    }\n  }\n\n  const clickShow = (clicked, key) => {\n    if(clicked === key) return\n    while(clicked.parentNode !== key) {\n      clicked = clicked.parentNode\n    }\n    if([...clicked.classList].includes('active')) {\n      // Do what?\n    } else {\n      setKeyTo(clicked.attributes['xlink:href'].nodeValue)\n    }\n  }\n\n  const buildTree = (root, key = { val: 0 }) => {\n    if(root.nodeType !== Node.ELEMENT_NODE) {\n      console.error('Root Type', root.nodeType)\n    } else {\n      const children = []\n      for(let child of root.childNodes) {\n        if(child.nodeType === Node.ELEMENT_NODE) {\n          if(\n            child.childNodes.length === 0\n            || [...child.childNodes].find(\n              sub => sub.nodeType !== Node.TEXT_NODE\n            )\n          ) {\n            children.push(buildTree(child, key))\n          } else {\n            const attrs = cleanAttributes(child.attributes)\n            attrs.key = ++key.val\n\n            const text = [...child.childNodes].map(c => c.data).join()\n            children.push(React.createElement(\n              child.nodeName, attrs, text\n            ))\n          }\n        } else if(child.data && child.data.trim() !== '') {\n          console.error('Child', child.data)\n        }\n      }\n      const attrs = cleanAttributes(root.attributes)\n      attrs.key = ++key.val\n\n      const ref = (root.nodeName === 'svg') ? svg : createRef()\n      attrs.ref = ref\n\n      if(attrs.id) {\n        elems.current[attrs.id] = attrs.ref\n      }\n\n      if(['space'].includes(attrs.className)) {\n        attrs.onClick = () => zoomTo(ref.current)\n      }\n\n      if(['parent'].includes(attrs.className)) {\n        attrs.onClick = () => {\n          attrs.ref.current.classList.add('selected')\n\n          console.info('RT', attrs.ref.current.childNodes)\n\n          let newView = zoomedBox(ref.current)\n          const card = attrs.ref.current.querySelector('.card')\n          if(card) {\n            newView = zoomedBox(card, { padPercent: 0 })\n            console.info('BX', newView)\n          }\n\n          // TweenMax.to(\n          //   svg.current, 1.75,\n          //   {\n          //     attr: { viewBox: newView },\n          //     ease: Power3.easeOut,\n          //   }\n          // )\n          let txElem = svg.current\n          if(elems.current['root']) {\n            txElem = elems.current['root'].current\n          }\n          // TweenMax.to(\n          //   txElem, 1.5,\n          //   {\n          //     style: { opacity: 0 },\n          //     ease: Power3.easeInOut,\n          //     delay: 0.25,\n          //     //onComplete: () => setFiles(f => [attrs.xlinkHref, ...f]),\n          //   }\n          // )\n        }\n      }\n\n      if(attrs.style && attrs.style.display === 'none') {\n        attrs.style.opacity = 0\n      }\n\n      if(attrs['inkscape:label']) {\n        children.unshift(<title key={++key.val}>{attrs['inkscape:label']}</title>)\n      }\n\n      if(attrs['inkscape:label'] === 'space') {\n        spaces.current.push(attrs.ref)\n      }\n\n      if(['key'].includes(attrs.className)) {\n        keys.current.push(attrs.ref)\n        attrs.onClick = (evt) => clickShow(evt.target, attrs.ref.current)\n      }\n\n      if(['link'].includes(attrs.className)) {\n        attrs.onClick = () => {\n          const dest = attrs.xlinkHref\n          if(dest.startsWith('#')) {\n            setKeyTo(dest)\n          } else {\n            setFiles(fs => [dest, ...fs])\n          }\n        }\n      }\n\n      let transform\n      if(transform = attrs['selected:transform']) {\n        const prevClick = attrs.onClick\n        attrs.onClick = (evt) => {\n          if(prevClick) prevClick(evt)\n\n          // TweenMax.to(\n          //   attrs.ref.current, 1,\n          //   {\n          //     attr: { transform: transform },\n          //     ease: Power3.easeOut,\n          //   }\n          // )\n        }\n      }\n\n      let rootTransform\n      if(rootTransform = attrs['selected:transform-root']) {\n        const prevClick = attrs.onClick\n        attrs.onClick = (evt) => {\n          if(prevClick) prevClick(evt)\n\n          let txElem = svg.current\n          if(elems.current['root']) {\n            txElem = elems.current['root'].current\n          }\n          TweenMax.to(\n            txElem, 10.75,\n            {\n              attr: { transform: rootTransform },\n              ease: Power3.easeOut,\n            }\n          )\n        }\n      }\n\n      if(['toggle'].includes(attrs.className)) {\n        const handler = () => {\n          attrs.ref.current.classList.toggle('on')\n          for(let space of spaces.current) {\n            const visible = space.current.style.opacity !== '0'\n            TweenMax.to(\n              space.current, 0.5,\n              {\n                display: visible ? 'none' : 'inline',\n                opacity: visible ? 0 : 1,\n                ease: Power3.easeInOut\n              }\n            )\n          }\n        }\n        window.addEventListener(\n          'keypress', (evt) => { if(evt.key === 's') handler() }\n        )\n        attrs.onClick = handler\n      }\n\n      const prevClick = attrs.onClick\n      attrs.onClick = (evt) => {\n        if(prevClick) prevClick(evt)\n\n        let node = evt.target\n        while(node.parentNode && !node.attributes['inkscape:label']) {\n          node = node.parentNode\n        }\n        if(!node || !node.attributes) {\n          setTooltip('')\n        } else {\n          node.classList.add('clicked')\n          setTimeout(() => node.classList.remove('clicked'), 1000)\n          setTooltip(node.attributes['inkscape:label'].nodeValue)\n          if(tipTimeout.current) {\n            clearTimeout(tipTimeout.current)\n          }\n          tipTimeout.current = setTimeout(() => setTooltip(), 5000)\n        }\n      }\n\n      const elem = React.createElement(\n        root.nodeName, attrs, children\n      )\n\n      return elem\n    }\n  }\n\n  const loadDoc = async (filename) => {\n    const res = await fetch(filename)\n    if(res.status >= 200 && res.status < 300) {\n      setDoc(await res.text())\n    } else {\n      alert(`Couldn't Load: ${filename}`)\n    }\n  }\n\n  const back = () => {\n    setFiles(f => f.slice(1))\n  }\n\n  useEffect(() => { loadDoc(files[0]) }, [files])\n\n  useEffect(() => {\n    if(doc) {\n      try {\n        const dom = (new DOMParser()).parseFromString(doc, 'text/xml')\n        keys.current = []\n        spaces.current = []\n        origView.current = dom.documentElement.attributes.viewBox.nodeValue\n        elems.current = {}\n        setSVG(buildTree(dom.documentElement))\n      } catch(err) {\n        alert(`Error Loading: ${files[0]}`)\n        console.error(err)\n        console.error(doc)\n      }\n    }  \n  }, [doc]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    for(let key of keys.current) {\n      for(let anchor of [...key.current.childNodes]) {\n        if(!anchor.attributes) continue\n        const id = anchor.attributes['xlink:href'].nodeValue.replace(/^#/, '')\n        if(elems.current[id].current.style.opacity !== '0') {\n          setKeyTo(id)\n        }\n      }\n    }\n  }, [SVG])\n\n  useEffect(() => {\n    const handler = (evt) => {\n      let view = getViewBox()\n      const mult = (evt.altKey ? 0.025 : 0.1) * (evt.deltaY / Math.abs(evt.deltaY))\n      if(evt.shiftKey) { // pan\n        view.x += view.width * mult\n      } else if(evt.ctrlKey) { // zoom\n        evt.preventDefault()\n\n        const point = svg.current.createSVGPoint()\n        point.x = evt.clientX\n        point.y = evt.clientY\n        const viewPoint = point.matrixTransform(svg.current.getScreenCTM().inverse())\n        const d = { x: viewPoint.x - view.x, y: viewPoint.y - view.y }\n        const newView = {\n          width: view.width * (1 - mult), height: view.height * (1 - mult)\n        }\n        const dPrime = {\n          x: newView.width * (d.x / view.width),\n          y: newView.height * (d.y / view.height),\n        }\n        newView.x = viewPoint.x - dPrime.x\n        newView.y = viewPoint.y - dPrime.y\n        view = newView\n      } else { // scroll\n        view.y += view.height * mult\n      }\n      setViewBox(view)\n    }\n  \n    window.addEventListener('wheel', handler, { passive: false })\n    return () => window.removeEventListener('wheel', handler)\n  }, [])\n\n  useEffect(() => {\n    const handler = (evt) => {\n      if(evt.key === 'Enter') {\n        setViewBox(origView.current)\n      }\n    }\n    window.addEventListener('keypress', handler)\n    return () => window.removeEventListener('keypress', handler)\n  }, [])\n\n\n  return (\n    <div id='App'>\n      {SVG}\n      {tooltip && <h1>{tooltip}</h1>}\n      {files.length > 1 &&\n        <button id='back' onClick={back}>\n          <span role='img' aria-label='Close'>❌</span>\n        </button>\n      }\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}