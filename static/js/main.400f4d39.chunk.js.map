{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useState","files","setFiles","doc","setDoc","origView","useRef","SVG","setSVG","keys","elems","svg","createRef","tooltip","setTooltip","camelCase","str","sep","split","map","part","i","toUpperCase","slice","join","cleanAttributes","attributes","attrs","attr","nodeName","nodeValue","style","prop","val","class","className","zoomedBox","elem","bbox","getBBox","tfm2elm","current","getScreenCTM","inverse","multiply","origin","createSVGPoint","x","y","dest","width","height","matrixTransform","zoomTo","newView","viewBox","TweenMax","to","ease","Power3","easeInOut","setKeyTo","replace","key","anchors","childNodes","filter","c","includes","anchor","classList","id","visible","add","remove","display","opacity","clickShow","clicked","parentNode","loadDoc","filename","a","fetch","res","status","text","alert","useEffect","dom","DOMParser","parseFromString","documentElement","buildTree","root","nodeType","Node","ELEMENT_NODE","children","child","length","find","sub","TEXT_NODE","push","data","React","createElement","trim","console","error","ref","onClick","onComplete","f","xlinkHref","unshift","evt","target","info","startsWith","fs","node","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.400f4d39.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef, useRef } from 'react'\nimport { TweenMax, Power3 } from 'gsap/all'\nimport './App.css'\n\nexport default () => {\n  const [files, setFiles] = useState(['survey.svg'])\n  const [doc, setDoc] = useState()\n  const origView = useRef(null)\n  const [SVG, setSVG] = useState()\n  const keys = useRef([])\n  const elems = useRef({})\n  const svg = createRef()\n  const [tooltip, setTooltip] = useState()\n\n  const camelCase = (str, sep = '-') => (\n    str.split(sep)\n    .map((part, i) => {\n      if(i === 0) {\n        return part\n      } else {\n        return part[0].toUpperCase() + part.slice(1)\n      }\n    })\n    .join('')\n  )\n\n  const cleanAttributes = (attributes) => {\n    const attrs = {}\n    for(let attr of attributes) {\n      attrs[attr.nodeName] = attr.nodeValue\n    }\n\n    if(attrs.style) {\n      const style = {}\n      for(let elem of attrs.style.split(';')) {\n        let [prop, val] = elem.split(':')\n        prop = camelCase(prop, '-')\n        style[prop] = val\n      }\n      attrs.style = style\n    }\n\n    if(attrs.class) {\n      attrs.className = attrs.class\n      delete attrs.class\n    }\n    for(let attr of ['xml:space', 'xlink:href', 'xmlns:xlink']) {\n      if(attrs[attr]) {\n        attrs[camelCase(attr, ':')] = attrs[attr]\n        delete attrs[attr]\n      }\n    }\n\n    return attrs\n  }\n\n  const zoomedBox = (elem) => {\n    const bbox = elem.getBBox()\n    const tfm2elm = (\n      svg.current.getScreenCTM().inverse().multiply(elem.getScreenCTM())\n    )\n    const pad = 2\n    let origin = svg.current.createSVGPoint()\n    origin.x = bbox.x - pad\n    origin.y = bbox.y - pad\n    let dest = svg.current.createSVGPoint()\n    dest.x = origin.x + bbox.width + 2 * pad\n    dest.y = origin.y + bbox.height + 2 * pad\n    origin = origin.matrixTransform(tfm2elm)\n    dest = dest.matrixTransform(tfm2elm)\n    dest.x -= origin.x\n    dest.y -= origin.y\n    return [origin.x, origin.y, dest.x, dest.y].join(' ')\n  }\n\n  const zoomTo = (elem) => {\n    let newView = zoomedBox(elem)\n    if(newView === svg.current.attributes.viewBox.nodeValue) {\n      newView = origView.current\n    }\n    TweenMax.to(\n      svg.current, 1, { attr: { viewBox: newView }, ease: Power3.easeInOut }\n    )\n  }\n\n  const setKeyTo = (to) => {\n    to = to.replace(/^#/, '')\n    for(let key of keys.current) {\n      const anchors = (\n        [...key.current.childNodes]\n        .filter(c => c.attributes && c.attributes['xlink:href'])\n      )\n      const links = (\n        anchors\n        .map(c => c.attributes['xlink:href'].nodeValue.replace(/^#/, ''))\n      )\n\n      if(links.includes(to)) {\n        for(let anchor of anchors) {\n          if(!anchor.classList) continue\n\n          const id = anchor.attributes['xlink:href'].nodeValue.replace(/^#/, '')\n          const elem = elems.current[id] && elems.current[id].current\n          const visible = id === to\n\n          if(visible) {\n            anchor.classList.add('active')\n          } else {\n            anchor.classList.remove('active')\n          }\n\n          TweenMax.to(\n            elem, 0.5, { display: visible ? 'inline' : 'none', opacity: visible ? 1 : 0, ease: Power3.easeInOut }\n          )\n        }\n      }\n    }\n  }\n\n  const clickShow = (clicked, key) => {\n    if(clicked === key) return\n    while(clicked.parentNode !== key) {\n      clicked = clicked.parentNode\n    }\n    if([...clicked.classList].includes('active')) {\n      // toggle spaces visibility\n    } else {\n      setKeyTo(clicked.attributes['xlink:href'].nodeValue)\n    }\n  }\n\n  const buildTree = (root, elems = {}, key = { val: 0 }) => {\n    if(root.nodeType !== Node.ELEMENT_NODE) {\n      console.error('Root Type', root.nodeType)\n    } else {\n      const children = []\n      for(let child of root.childNodes) {\n        if(child.nodeType === Node.ELEMENT_NODE) {\n          if(\n            child.childNodes.length === 0\n            || [...child.childNodes].find(\n              sub => sub.nodeType !== Node.TEXT_NODE\n            )\n          ) {\n            children.push(buildTree(child, elems, key))\n          } else {\n            const attrs = cleanAttributes(child.attributes)\n            attrs.key = ++key.val\n\n            const text = [...child.childNodes].map(c => c.data).join()\n            children.push(React.createElement(\n              child.nodeName, attrs, text\n            ))\n          }\n        } else if(child.data && child.data.trim() !== '') {\n          console.error('Child', child.data)\n        }\n      }\n      const attrs = cleanAttributes(root.attributes)\n      attrs.key = ++key.val\n\n      const ref = createRef()\n      attrs.ref = ref\n\n      if(attrs.id) {\n        elems[attrs.id] = attrs.ref\n      }\n\n      if(['space'].includes(attrs.className)) {\n        attrs.onClick = () => zoomTo(ref.current)\n      }\n\n      if(['parent'].includes(attrs.className)) {\n        attrs.onClick = () => {\n          const newView = zoomedBox(ref.current)\n          TweenMax.to(\n            svg.current, 0.3, { attr: { viewBox: newView }, opacity: 0, ease: Power3.easeInOut, onComplete: () => setFiles(f => [attrs.xlinkHref, ...f])}\n          )\n        }\n      }\n\n      if(attrs.style && attrs.style.display === 'none') {\n        attrs.style.opacity = 0\n      }\n\n      if(attrs['inkscape:label']) {\n        children.unshift(<title key={++key.val}>{attrs['inkscape:label']}</title>)\n      }\n\n      if(['key'].includes(attrs.className)) {\n        keys.current.push(attrs.ref)\n        attrs.onClick = (evt) => clickShow(evt.target, attrs.ref.current)\n      }\n\n      if(['link'].includes(attrs.className)) {\n        console.info('link', root.id, attrs.xlinkHref)\n        attrs.onClick = () => {\n          const dest = attrs.xlinkHref\n          if(dest.startsWith('#')) {\n            setKeyTo(dest)\n          } else {\n            setFiles(fs => [dest, ...fs])\n          }\n        }\n      }\n\n      if(root.nodeName === 'svg') {\n        attrs.ref = svg\n      }\n\n      if(!attrs.onClick) {\n        attrs.onClick = (evt) => {\n          let node = evt.target\n          while(node.parentNode && !node.attributes['inkscape:label']) {\n            node = node.parentNode\n          }\n          if(!node || !node.attributes) {\n            setTooltip('')\n          } else {\n            setTooltip(node.attributes['inkscape:label'].nodeValue)\n            setTimeout(() => setTooltip(), 5000)\n          }\n        }\n      }\n\n      return React.createElement(\n        root.nodeName, attrs, children\n      )\n    }\n  }\n\n  const loadDoc = async (filename) => {\n    const res = await fetch(filename)\n    if(res.status >= 200 && res.status < 300) {\n      setDoc(await res.text())\n    } else {\n      alert(`Couldn't Load: ${filename}`)\n    }\n  }\n\n  const back = () => {\n    setFiles(f => f.slice(1))\n  }\n\n  useEffect(() => { loadDoc(files[0]) }, [files])\n\n  useEffect(() => {\n    if(doc) {\n      const dom = (new DOMParser()).parseFromString(doc, 'text/xml')\n      keys.current = []\n      origView.current = dom.documentElement.attributes.viewBox.nodeValue\n      elems.current = {}\n      setSVG(buildTree(dom.documentElement, elems.current))\n    }  \n  }, [doc])\n\n  useEffect(() => {\n    for(let key of keys.current) {\n      for(let anchor of [...key.current.childNodes]) {\n        if(!anchor.attributes) continue\n        const id = anchor.attributes['xlink:href'].nodeValue.replace(/^#/, '')\n        console.info('checking', anchor.id, id, elems.current[id].current.style.opacity)\n        if(elems.current[id].current.style.opacity !== '0') {\n          setKeyTo(id)\n        }\n      }\n    }\n  }, [SVG])\n\n  return (\n    <div className='App' style={{height: '100vh'}}>\n      {SVG}\n      {tooltip && <h1>{tooltip}</h1>}\n      {files.length > 1 && <a id='back' onClick={back}>❌</a>}\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}